import db_connector
import time_base64 as t
package item_movement
var db = db_connector.start()
function write_change_statement(id, to_place)
# + id 是物品ID， to_place是去向
# + from_place/requester可以通过id查出
# + commiter可以通过to_place查出
# + req_time 通过get_local_timestamp()或get_utc_timestamp()完成
# + 写变动表,把内容填上去
    var res = db.exec("select local_place,manager,signals from propertys where uuid="+id)
    var from_place = res[0][0].data.to_number()
    # 这里需要string 转 数字
    var requester = res[0][1].data.to_number()
    var sign = res[0][2].data.to_number()
    var item_id = id
    var res_1 = db.exec("select group_admin from places where uuid="+to_place)
    var commiter = res_1[0][0].data.to_number()
    var req_time = t.get_local_timestamp()
    var stmt = db.prepare("INSERT INTO move_places(item_id,from_place,to_place,requester,commiter,req_time,sign) values(?,?,?,?,?,?,?)")
    stmt.bind(0,item_id)
    stmt.bind(1,from_place)
    stmt.bind(2,to_place)
    stmt.bind(3,requester)
    stmt.bind(4,commiter)
    stmt.bind(5,req_time)
    stmt.bind(6,sign)
    stmt.just_exec()
end
function return_from_place_and_requester(id)
    var res = db.exec("select local_place,manager,signals from propertys where uuid="+id)
    return res 
end   
function modify_state(id)
# + 这个id是指物品的id
# + 修改状态，需要注意需要保存原有状态
# + 通过id改变signal
# + 记住先write_change_statement再modify_state（顺序很重要）
db.exec("update propertys set signals = 4 where uuid = "+id)
end
function delete_change_statement(id)
# + 注意：这个id是指物品的id
# + 移除变动表,就删数据表的内容
# + 通过id反查变动地点表，然后删除字段
# + 建议先add_log，再modify_item_list_information1或modify_item_list_information2，再delete_change_statement
db.exec("delete from move_places where item_id="+id)
end
function modify_item_list_information1(id)
# + 同意
# + 这里的id也是物品id
# + 修改物品表信息,修改信息，改地址,改管理员
# + 通过id反查
# + 恢复signal(signal)，改变地址(to_place)，即可
# + 建议先add_log，再modify_item_list_information1，再delete_change_statement
var res = db.exec("select to_place,commiter,sign from move_places where item_id="+id) 
var to_place = res[0][0].data.to_number()
var commiter = res[0][1].data.to_number()
var sign = res[0][2].data.to_number()
db.exec("update propertys set signals="+sign+",local_place="+to_place+",manager="+commiter+" where uuid="+id)   
end
function add_acceptance_log(id)
    # + 添加日志,自动生成
    # + 通过id查询变动地点表
    # + 通过查询信息自动化生成string，并生成日志信息
    # + signal是固定的，，
    # + 建议先add_log，再modify_item_list_information1或modify_item_list_information2，再delete_change_statement
    # + 这个可以分成两部分写，一个是同意，一个是驳回
    var log_time = t.get_local_timestamp()
    var res = db.exec("select from_place,to_place,requester,commiter,item_id from move_places where item_id="+id) 
    var from_place = res[0][0].data
    var to_place = res[0][1].data
    var requester = res[0][2].data
    var commiter = res[0][3].data
    var item_id = res[0][4].data
    var signals = 4 
    #需要修改磋商日志的signals
    var res_1 = db.exec("select dd_first,dd_second,dd_third,dd_fourth from places where uuid="+from_place)
    var from_place_dd_first = res_1[0][0].data
    var from_place_second = res_1[0][1].data
    var from_place_third = res_1[0][2].data
    var from_place_forth = res_1[0][3].data
    var res_2 = db.exec("select dd_first,dd_second,dd_third,dd_fourth from places where uuid="+to_place)
    var to_place_dd_first = res_2[0][0].data
    var to_place_second = res_2[0][1].data
    var to_place_third = res_2[0][2].data
    var to_place_forth = res_2[0][3].data
    var res_3 = db.exec("select eq_name,brand from propertys where uuid="+item_id)
    var eq_name = res_3[0][0].data
    var brand = res_3[0][1].data
    var detail = "在"+t.timestamp2string(log_time)+",由" + requester + "提出和" + commiter + "同意，将编号为"+item_id+"的"+brand+"牌子的"+eq_name+"从"+from_place_dd_first+"的"+from_place_second+from_place_third+"层"+from_place_forth+"转移到"+to_place_dd_first+"的"+to_place_second+to_place_third+"层"+to_place_forth+"，已经同意"
    var stmt = db.prepare("INSERT INTO logs(log_time,requester,commiter,detail,signals) values(?,?,?,?,?)")
    stmt.bind(0,log_time)
    stmt.bind(1,requester)
    stmt.bind(2,commiter)
    stmt.bind(3,detail)
    stmt.bind(4,signals)
    stmt.just_exec()
end
function add_rejection_log(id)
    # + 添加日志,自动生成
    # + 通过id查询变动地点表
    # + 通过查询信息自动化生成string，并生成日志信息
    # + signal是固定的，，
    # + 建议先add_log，再modify_item_list_information1或modify_item_list_information2，再delete_change_statement
    # + 这个可以分成两部分写，一个是同意，一个是驳回
    var log_time = t.get_local_timestamp()
    var res = db.exec("select from_place,to_place,requester,commiter,item_id from move_places where item_id="+id) 
    var from_place = res[0][0].data
    var to_place = res[0][1].data
    var requester = res[0][2].data
    var  commiter = res[0][3].data
    var item_id = res[0][4].data
    var signals = 4 
    #需要修改磋商日志的signals
    var res_3 = db.exec("select dd_first,dd_second,dd_third,dd_fourth from places where uuid="+from_place)
    var from_place_dd_first = res_3[0][0].data
    var from_place_second = res_3[0][1].data
    var from_place_third = res_3[0][2].data
    var from_place_forth = res_3[0][3].data
    var res_1 = db.exec("select dd_first,dd_second,dd_third,dd_fourth from places where uuid="+to_place)
    var to_place_dd_first = res_1[0][0].data
    var to_place_second = res_1[0][1].data
    var to_place_third = res_1[0][2].data
    var  to_place_forth = res_1[0][3].data
    var res_2 = db.exec("select eq_name,brand from propertys where uuid="+item_id)
    var eq_name = res_2[0][0].data
    var brand = res_2[0][1].data
    var detail = "在"+t.timestamp2string(log_time)+",由" + requester + "提出和" + commiter + "驳回，将编号为"+item_id+"的"+brand+"牌子的"+eq_name+"从"+from_place_dd_first+"的"+from_place_second+from_place_third+"层"+from_place_forth+"转移到"+to_place_dd_first+"的"+to_place_second+to_place_third+"层"+to_place_forth+"，已经驳回"
    var stmt = db.prepare("INSERT INTO logs(log_time,requester,commiter,detail,signals) values(?,?,?,?,?)")
    stmt.bind(0,log_time)
    stmt.bind(1,requester)
    stmt.bind(2,commiter)
    stmt.bind(3,detail)
    stmt.bind(4,signals)
    stmt.just_exec()




end
function rejection_of_demand(id)
# + 驳回需求,删除变动表(复用)，恢复原来的记录
# + 建议先add_log，再modify_item_list_information2，再delete_change_statement
# + 这个把三个函数包起来
# + <font color=red>直接调用这个包即可</font>
    add_rejection_log(id)
    modify_item_list_information2(id)
    delete_change_statement(id)
end
function modify_item_list_information2(id)
# + 拒绝
# + 修改物品表信息,修改信息，改地址
# + 通过id反查
# + 恢复signal(signal)，地址(from_place)*其实可以不用修改*，即可
# + 建议先add_log，再modify_item_list_information2，再delete_change_statement
var res = db.exec("select sign from move_places where item_id="+id) 
var sign = res[0][0].data.to_number()
var res_1 = db.exec("update propertys set signals="+sign+" where uuid="+id)   
end
function acceptance_of_demand(id)
# + 建议先add_log，再modify_item_list_information1，再delete_change_statement
# + <font color=red>直接调用这个包即可</font>
    add_acceptance_log(id)
    modify_item_list_information1(id)
    delete_change_statement(id)
end
function start_change(id, to_place)
# + 记住先write_change_statement再modify_state（顺序很重要）
# + <font color=red>直接调用这个包即可</font>
    write_change_statement(id,to_place)
    modify_state(id)
end
function how_many_lines()
    #有多少行
    var res = db.exec("SELECT count(*) FROM move_places") 
    return res[0][0].data.to_number()
end

function read_move_places()
    #读取那个表格
    var res = db.exec("select * from move_places")
    return res
end
function find_room_uuid(campus,building,room)
    #判断楼层是否存在，顺带查了它对应的uuid
    var res = db.exec("SELECT uuid FROM places where dd_first=\""+campus+"\" and dd_second=\""+building+"\" and dd_fourth=\""+room+"\"") 
    return res[0][0].data.to_number()
end
function is_room_existed(campus,building,room)
    #判断楼层是否存在，顺带查了它对应的uuid
    var res = db.exec("SELECT count(*) FROM places where dd_first=\""+campus+"\" and dd_second=\""+building+"\" and dd_fourth=\""+room+"\"") 
    if(res[0][0].data.to_number() != 0)
    return true
    else
    return false
    end
end
function search_name_by_id(uuid)
    #通过物品的uuid反查物品的名字
    var res = db.exec("select eq_name from propertys where uuid="+uuid)
    return res[0][0].data
end
function search_name_by_user_id(uuid)
    #通过用户的uuid反查用户
end
function search_logs_by_users_id(uuid)
    #通过user的id反查logs的内容
    var res = db.exec("select * from logs where requester ="+ uuid +"or commiter =" + uuid+" limit 10")
    return res
end
function check_user_jurisdiction_to_send_message(uuid,userid)
    #查询用户是否有权力发这条申请
    #uuid是物品的uuid
    #userid是用户id
    #实现了登录作用
    var res = db.exec("select manager from propertys where uuid="+uuid)
    if(res[0][0].data.to_number()==userid)
    return true
    else
    return false
    end
end
function check_user_jurisdiction_to_recieve_message(uuid,userid)
    #查询用户是否有权力同意或驳回这条申请
    #uuid是物品的uuid
    #userid是用户id
    #实现了登录作用
    var res = db.exec("select commiter from move_places where item_id="+uuid)
    if(res[0][0].data.to_number()==userid)
    return true
    else
    return false
    end
end
function is_item_moved(uuid)
    #判断物品是不是已经移动了
    #uuid是物品的uuid
    var res = db.exec("SELECT count(*) FROM move_places where item_id="+uuid) 
    if(res[0][0].data.to_number() != 0)
    return false
    #false是已经存在了，不可以输入
    else
    return true
    #true是未存在的，可以输入
    end
end
function is_item_moved_to_another_place(uuid,campus,building,room)
    #判断物品是不是已经移动到另外的位置
    #uuid是物品的uuid
    var res = db.exec("select local_place from propertys where uuid="+uuid)
    var room_uuid = find_room_uuid(campus,building,room) 
    if(res[0][0].data.to_number() == room_uuid)
    return false
    #false是未移动,不应该输入
    else
    return true
    #true是移动，可以输入
    end
end
function uuid_to_campus(uuid)
    # 通过地址uuid反查校区
    var res = db.exec("select dd_first from places where uuid = "+ uuid)
    return res[0][0].data
end
function uuid_to_building(uuid)
    # 通过地址uuid反查教学楼
    var res = db.exec("select dd_second from places where uuid = "+ uuid)
    return res[0][0].data
end
function uuid_to_floor(uuid)
    # 通过地址uuid反查楼层
    var res = db.exec("select dd_third from places where uuid = "+ uuid)
    return res[0][0].data
end
function uuid_to_room(uuid)
    # 通过地址uuid反查门牌号
    var res = db.exec("select dd_fourth from places where uuid = "+ uuid)
    return res[0][0].data
end
function uuid_to_roomuser(uuid)
    # 通过地址uuid反查管理员id
    # 返回的是数字，不需要转换
    var res = db.exec("select group_admin from places where uuid = "+ uuid)
    return res[0][0].data.to_number()
end
function is_property_existed(uuid)
    #判断物品是否存在，uuid
    var res = db.exec("SELECT count(*) FROM propertys where uuid="+ uuid) 
    if(res[0][0].data.to_number() != 0)
    return true
    else
    return false
    end
end
function use_item_id_find_room_id(uuid)
    #用物品的id查找物品的地址
    #返回为number，不需要转换    
    var res = db.exec("select local_place from propertys where uuid = " + uuid)
    return res[0][0].data.to_number()
end
function item_id_to_campus(uuid)
    #这个是物品的uuid查校区了
    var tmp = use_item_id_find_room_id(uuid)
    var tmp2 = uuid_to_campus(tmp)
    return tmp2
end
function item_id_to_building(uuid)
    #这个是物品的uuid查教学楼了
    var tmp = use_item_id_find_room_id(uuid)
    var tmp2 = uuid_to_building(tmp)
    return tmp2
end
function item_id_to_floor(uuid)
    #这个是物品的uuid查楼层了
    var tmp = use_item_id_find_room_id(uuid)
    var tmp2 = uuid_to_floor(tmp)
    return tmp2
end
function item_id_to_room(uuid)
    #这个是物品的uuid查房间号了
    var tmp = use_item_id_find_room_id(uuid)
    var tmp2 = uuid_to_room(tmp)
    return tmp2
end
function item_id_to_roomuser(uuid)
    #这个是物品的uuid查管理员了
    var tmp = use_item_id_find_room_id(uuid)
    var tmp2 = uuid_to_roomuser(tmp)
    return tmp2
end

function search_building_by_campus(dd_first)
    #通过dd_first查找在这个校区内教学楼的位置
    #注意，这个是未转化的，需要自己转化
    var res = db.exec("select dd_second from places where dd_first = \""+ dd_first +"\"")
    return res
end

function search_room_by_building_and_campus(dd_first,dd_second)
    #通过dd_first和dd_second查房间号
    #注意，这个是未转化的，需要自己转化
    var res = db.exec("select dd_fourth from places where dd_first = \""+ dd_first +"\" and dd_second = \""+dd_second+"\"")
    return res
end

function search_floor_by_building_and_campus(dd_first,dd_second)
    #通过dd_first和dd_second查楼层
    #注意，这个是未转化的，需要自己转化
    var res = db.exec("select dd_third from places where dd_first = \""+ dd_first +"\" and dd_second = \""+dd_second+"\"")
    return res
end
function search_room_by_building_and_campus_and_floor(dd_first,dd_second,dd_third)
    #通过dd_first和dd_second和dd_third查房间号
    #注意，这个是未转化的，需要自己转化
    var res = db.exec("select dd_fourth from places where dd_first = \""+ dd_first +"\" and dd_second = \""+dd_second+"\" and dd_third = \""+dd_third+"\"")
    return res
end