package view_repair

import imgui
import csdbc_mysql
import time_base64

using system
using imgui


#樊杨bug记录：
#1.报修按钮只有第一个能用 
#已解决:不同的报修按钮取不同的名字
#2.筛选界面的exit按钮 点击后返回主界面 记录仍未筛选内容  
#已解决：查询语句不共用同一个变量 res
#3.筛选界面的exit按钮 点击过程卡顿
#猜测：与数据库调用有关  
#已解决：在w2打开前的数据库调用前加上条件判断select_res是否为空，同时w2结束时将select_res清空

#张琚杰测试得出bug:
#1 报修填表之中有个提交原因 填写之后提交 保修了第一个 但第二个报修点进去是已经填好的内容 
# 已解决：在退出report_repair窗口时清空broken_reason数据
#2 主界面无法关闭
#已解决：增加变量is_view_all_items进行控制
#3 报修填表提交之后 外面的按钮没有变成已修复或者其他
#已解决： 忘记修改propertys表中的signals数据，并增加了数据改动后重新访问数据库功能
#4 开窗口时的no_collapse前缺少flags
#已解决

#马晓晨提议：
#将所有signals=3即故障待维修的物品优先显示
#已完成

var is_view_all_items = true

#用来标志数据库是否更新，主界面是否需要重新访问数据库
var main_res_update = false
var main_res_init = true
var res = new array

#筛选功能使用
var select_way = {"按物资id查找","按物资状态查找","按物资名字查找"}
var select_kind = 3
var input_con = ""
var select_res = new array

#开select_window使用
var w2_state = false
var w3_state = false
var w4_state = false
var select_state = false

# repair_button_process模块使用
var repair_bs = new array
var repair_w_state = new hash_map
var repair_con = new array

#填broken表使用
var broken_time = new hash_map
var broken_time_year = ""
var broken_time_month = ""
var broken_time_day = ""
var broken_time_hour = ""
var broken_time_min = ""
var broken_time_init = false
var broken_reason = ""
var broken_submit_state = false
var broken_submit_success_state = false

#填写logs表使用
var finish_time = new hash_map
var logs_time = ""
var finish_time_year=""
var finish_time_month=""
var finish_time_day=""
var logs_requester = new number
var logs_detail = ""
var finish_writing_state = false
var finish_writing_success_state = false
var requester = ""
var detail = ""
var method = ""
var timelog = ""
#var logs_signals = new number

function all_items_ifo(manager_id)
    import db_connector
    var db = db_connector.start()
    if db == null
        system.out.println("连接失败,程序终止！")
        system.exit(1)
    end
    
    var res = db.exec("select * from propertys where manager=\"" + manager_id + "\"")
    return res
end

function view_all_items(manager_id)
     #作用：查看某个管理员管辖的所有物品
    #按钮触发 gui界面长期存在
    if is_view_all_items

        #更新主界面数据库信息
        if(main_res_init)
            res = all_items_ifo(manager_id)
            main_res_init = false
        end
        #打开基础窗口
        var w1_is_open = true
        begin_window("view##w1",w1_is_open,{flags.no_collapse})
            set_window_pos(vec2(0,0))
            set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))
            
            #下拉框 选择筛选方式
            var c1 = combo_box("查找方式",select_kind,select_way)
            #输入框 输入筛选内容
            var i1 = input_text("", input_con, 100)
            #按钮 确认进入筛选界面
            same_line()
            var b1 = button("筛选")

            #输出每条记录，并在每条记录后添加相应按钮
            text("uuid\teq_name\teq_type\tbrand\twbdw\tstart_time\ttime_limit\tsfjz\tis_available\tlocal_place\tmanager\tsignals")

            #优先输出正在维修的物品
            foreach i in res
                if i.back.data == "3"
                    repair_button_process(i)  
                end
            end

            #再输出其它的物品
            foreach i in res
                if i.back.data != "3"
                    repair_button_process(i)  
                end
            end

            text("")
            text("")
    
            #当b1筛选按钮按下 并且 输入框内容不为空
            if b1 && !input_con.empty()
                #改变窗口bool值状态
                switch select_kind
                    case 0
                        w2_state = true
                        select_state = true
                        text("0")
                    end
                    case 1
                        w3_state = true
                        select_state = true
                        text("1")
                    end
                    case 2
                        w4_state = true
                        select_state = true
                        text("2")
                    end
                end
            end

            #打开筛选窗口
            select_window()

            if !w1_is_open
                is_view_all_items = false
            end

        end_window()
    end
end


function repair_button_process(one_record)
    #将one_record处理为输出的字符串

    var data_in_line = ""
    #foreach j in one_record
    import time_base64
    var j=0
    for j=0,j<one_record.size,++j
        if j == 5
            data_in_line += time_base64.timestamp2string(one_record.at(j).data)
        else
            data_in_line += one_record.at(j).data
        end
        data_in_line += '\t'
     #   data_in_line += j.data + '\t'
    end
    var cur_signal = one_record.back.data
    var cur_uuid = one_record.front.data
    #将字符串打印到屏幕，并放置报修按钮
    text(data_in_line)
    same_line()

    if cur_signal == "1" || cur_signal == "2" || cur_signal == "4"
        var button_name = "报修##b"
        button_name += cur_uuid
        var b_repair = button(button_name)
        
        #当报修按钮触发时
        if b_repair
            repair_w_state[cur_uuid] = true
            broken_time_init = true
        end

        if broken_time_init
            broken_time = runtime.local_time()
            broken_time_year = to_string(broken_time.year+1900)
            broken_time_month = to_string(broken_time.mon+1)
            broken_time_day = to_string(broken_time.mday)
            broken_time_hour = to_string(broken_time.hour)
            broken_time_min = to_string(broken_time.min)
            broken_time_init = false
        end

        if repair_w_state.exist(cur_uuid) && repair_w_state[cur_uuid]
            report_repair(cur_uuid)
        end
    end

    if cur_signal == "3"
        var button_name = "修理完成##b"
        button_name += to_string(cur_uuid)
        var b_repair = button(button_name)
        
        #当报修按钮触发时
        if b_repair
            repair_w_state[cur_uuid] = true
        end
        if repair_w_state.exist(cur_uuid) && repair_w_state[cur_uuid]
            data_supply(one_record)
        end
    end
end

function select_window()
    if select_state
        #当select_res为空时才进行数据库连接，初始化select_res,同时w2结束时将select_res清空
        if select_res.empty()
            import db_connector
            var db = db_connector.start()
            if db == null
                system.out.println("连接失败,程序终止！")
                system.exit(1)
            end

            if w2_state
                #在数据库中用uuid进行筛选
                select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and uuid=\"" + input_con + "\"")
            end
            if w3_state
                #在数据库中用signal进行筛选
                select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and signals=\"" + input_con + "\"")
            end
            if w4_state
                #select_with_id(manager_id,input_con,w4_state)
                #在数据库中用name进行筛选
                select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and eq_name like \"%" + input_con + "%\"")
            end
        end

        var w2_is_open = true
        begin_window("select_with_##w2",w2_is_open,{flags.no_collapse})
            #window属性设置
            set_window_pos(vec2(0,0))
            set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))
 
            #处理记录为空情况
            if select_res.empty()
                text("无该项记录")
            end
                 
            #将记录中数据全部输出
            foreach i in select_res
                repair_button_process(i)  
            end
                 
            #处理用户要退出的情况：1.按exit按钮 2.直接点×退出
            if button("exit##b2") || !w2_is_open
                select_state = false
                select_res.clear()
            end

            #末尾两空行，不然点下面按钮不方便
            text("")
            text("")
                 
        end_window()   
    end
end

function report_repair(broken_item_id)
    #作用：进行报修填表
    #构建一个gui弹窗 报修按钮触发 输入框 + 完成按钮（关闭弹窗+上传数据+更改final）
    import time_base64

    var w3_is_open = true
    begin_window("report_repair##w3",w3_is_open,{flags.no_collapse})
        set_window_pos(vec2(0,0))
        set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))

        #提示文字
        text("报修时间：")
        same_line()
        #var broken_i1 = input_text("##broken_i1", broken_time_year, 100)
        var str = broken_time_year+"-"+broken_time_month+"-"+broken_time_day +" "+broken_time_hour+":"+broken_time_min
        var broken_i1 = input_text("##broken_i1", str, 100)
        t_str_process(str)
        #same_line()
        #var broken_i2 = input_text("##broken_i2", broken_time_month, 100)
        #same_line()
        #var broken_i3 = input_text("##broken_i3", broken_time_day, 100)
        #same_line()
        #var broken_i4 = input_text("##broken_i4", broken_time_hour, 100)
        #same_line()
        #var broken_i5 = input_text("##broken_i5", broken_time_min, 100)

        #提示文字
        text("报修原因：")
        same_line()
        #输入框 输入报修原因
        var broken_i6 = input_text("##broken_i6", broken_reason, 100)

        #提交按钮
        var broken_b1 = button("提交##broken_submit")
        if broken_b1
            broken_submit_state = true
        end

        if broken_submit_state
            import db_connector
            var db = db_connector.start()
            if db == null
                system.out.println("连接失败,程序终止！")
                system.exit(1)
            end

            #向数据库表格broken插入数据 uuid,repair_time、repair_method为空,另外三个与变量绑定
            var broken_stmt = db.prepare("insert into broken values (null,?,?,?,?,?)")
            broken_stmt.bind(0, broken_item_id)
            #broken_stmt.bind(1, time_base64.to_timestamp(runtime.local_time())) 
            @begin
            broken_stmt.bind(1, time_base64.mytime_to_timestamp(broken_time_year.to_number()-1900,
                                                                broken_time_month.to_number(),
                                                                broken_time_day.to_number(),
                                                                broken_time_hour.to_number(),
                                                                broken_time_min.to_number(),0)) 
            @end
            broken_stmt.bind(2, broken_reason)
            broken_stmt.bind(3, "\\ ")
            broken_stmt.bind(4, "\\ ")
            broken_stmt.just_exec()

            db.just_exec("update propertys set signals = \"3\" where uuid = \"" + broken_item_id +"\"")
            #修改broke_submit_success_state，使得出现提交成功提示字
            broken_submit_success_state = true
            #修改broke_submit_state，使得下次渲染不再调用数据库连接
            broken_submit_state = false
            #修改main_res_update,使得主界面数据库信息更新
            main_res_update = true
        end

        if broken_submit_success_state
            text("表单上传成功！")
        end
        
        if button("退出##broken_exit") || !w3_is_open
            repair_w_state[cur_uuid] = false
            broken_reason = ""
            broken_submit_success_state = false
            if main_res_update
                foreach i in res
                    if i.front.data == broken_item_id
                        i.back.data = "3"
                        break
                    end
                end
                main_res_update = false
            end
        end

    end_window()   
end

function broken_table_ifo()
    import db_connector
    var db = db_connector.start()
    if db == null
        system.out.println("连接失败,程序终止！")
        system.exit(1)
    end

    var test_res = db.exec("select * from broken")
    return test_res
end

function show_broken_table(test_res)
    var w5_is_open = true
    begin_window("broken_table##w5",w5_is_open,{flags.no_collapse})
        set_window_pos(vec2(0,0))
        set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))
        var data_in_line = ""
        foreach i in test_res
            for j=0,j<i.size,++j
                if j == 2
                    data_in_line += time_base64.timestamp2string(i.at(j).data)
                else
                    data_in_line += i.at(j).data
                end
                data_in_line += '\t'
            #   data_in_line += j.data + '\t'
            end
            text(data_in_line)
            data_in_line.clear()
        end
    end_window()
end

function t_str_process(str)
    var temp_str = ""
    var i = 0
    while str[i] != '-' && i < str.size
        temp_str += str[i]
        i++
    end
    broken_time_year = temp_str
    i++
    temp_str.clear()

    while str[i] != '-' && i < str.size
        temp_str += str[i]
        i++
    end
    broken_time_month = temp_str
    i++
    temp_str.clear()

    while str[i] != ' ' && i < str.size
        temp_str += str[i]
        i++
    end
    broken_time_day = temp_str
    i++
    temp_str.clear()

    while str[i] != ':' && i < str.size
        temp_str += str[i]
        i++
    end
    broken_time_hour = temp_str
    i++
    temp_str.clear()

    while str[i] != ' ' && i < str.size
        temp_str += str[i]
        i++
    end
    broken_time_min = temp_str
    
end

function data_supply(one_record)
    #该函数作用为：工作完成后，补充维修相关信息
    #构建一个gui弹窗（输入框 + 完成按钮（关闭弹窗+上传数据+更改final）
    var cur_uuid = one_record.front.data
    var w4_is_open = true
    begin_window("data_supply##w4",w4_is_open,{flags.no_collapse})
        set_window_pos(vec2(0,0))
        set_window_size(vec2(0.5*get_monitor_width(0),0.5*get_monitor_height(0)))
        
        text("报修完成表")
        text("编号："+cur_uuid)
        #直接生成当前时间
        finish_time = runtime.local_time()
        finish_time_year = to_string(finish_time.year+1900)
        finish_time_month = to_string(finish_time.mon+1)
        finish_time_day = to_string(finish_time.mday)
        logs_time=finish_time_year+"-"+finish_time_month+"-"+finish_time_day
        text("填表时间"+logs_time)
        #输入填表人的id
        text("填表人：")
        same_line()
        var supply_id = input_text("##suppy_id",requester,20)
        #输入修理方法和修理时间
        text("修理方法：")
        same_line()
        var repair_method = input_text("##repair_method",method,100)
        text("修理时间：")
        same_line()
        var repair_time = input_text("##repair_method",timelog,20)
        #commiter不填写 仅列出
        text("批准人：")
        #输入框 输入细节
        text("补充信息")
        same_line()
        var supply_detail = input_text("##suppy_detail",detail,100)
        #完成按钮
        var supply_b1 = button("完成##finish_writing")
        if supply_b1
            finish_writing_state = true
        end
        if finish_writing_state
            import db_connector
            var db = db_connector.start()
            if db == null
                system.out.println("连接失败,程序终止！")
                system.exit(1)
            end
        
            #向数据库logs表填信息
            #logs_signals = 6
            var logs_stmt = db.prepare("insert into logs values (null,?,?,null,?,?)")
            logs_stmt.bind(0,logs_time)
            logs_stmt.bind(1,logs_requester)
            logs_stmt.bind(2,logs_detail
            logs_stmt.bind(3,6)
            logs_stmt.just_exec()
            #向数据库的broken表填写修理时间和方法信息
            logs_stmt = db.prepare("insert into broken values (null,null,null,null,?,?)")
            logs_stmt.bind(0,repair_time)
            logs_stmt.bind(1,repair_method)
            #将物品表的flag改为2 即正常使用
            logs_stmt = db.prepare("insert into propertys values (null,null,null,null,null,null,null,null,null,null,null,?)")
            logs_stmt.bind(0,2)
            finish_writing_success_state = true
            #下次渲染不再调用数据库连接
            finish_writing_state = false
        end

        if finish_writing_success_state
            text("表单上传成功！")
        end

        if button("exit##b_supply_exit") || !w4_is_open
            repair_w_state[cur_uuid] = false;
        end
    end_window()   
end


